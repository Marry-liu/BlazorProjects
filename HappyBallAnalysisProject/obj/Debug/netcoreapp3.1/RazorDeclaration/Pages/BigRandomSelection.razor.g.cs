// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HappyBallAnalysisProject.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Mary\source\repos\HappyBallAnalysisProject\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Mary\source\repos\HappyBallAnalysisProject\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Mary\source\repos\HappyBallAnalysisProject\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Mary\source\repos\HappyBallAnalysisProject\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Mary\source\repos\HappyBallAnalysisProject\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Mary\source\repos\HappyBallAnalysisProject\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Mary\source\repos\HappyBallAnalysisProject\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Mary\source\repos\HappyBallAnalysisProject\_Imports.razor"
using HappyBallAnalysisProject;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Mary\source\repos\HappyBallAnalysisProject\_Imports.razor"
using HappyBallAnalysisProject.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Mary\source\repos\HappyBallAnalysisProject\_Imports.razor"
using AntDesign;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Mary\source\repos\HappyBallAnalysisProject\_Imports.razor"
using HappyBallAnalysisProject.Service;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Mary\source\repos\HappyBallAnalysisProject\_Imports.razor"
using HappyBallAnalysisProject.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Mary\source\repos\HappyBallAnalysisProject\_Imports.razor"
using HappyBallAnalysisProject.Methods;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\Mary\source\repos\HappyBallAnalysisProject\_Imports.razor"
using AntDesign.Charts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\Mary\source\repos\HappyBallAnalysisProject\_Imports.razor"
using HappyBallAnalysisProject.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Mary\source\repos\HappyBallAnalysisProject\Pages\BigRandomSelection.razor"
using System.Text;

#line default
#line hidden
#nullable disable
    public partial class BigRandomSelection : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 46 "C:\Users\Mary\source\repos\HappyBallAnalysisProject\Pages\BigRandomSelection.razor"
       
    public object[] RedModel;
    public object[] BlueModel;
    public List<int> HighProRedList = new List<int>();
    public List<int> MiddleProRedList = new List<int>();
    public List<int> LowProRedList = new List<int>();
    public List<PrintNumbers> PrintNumbersList = new List<PrintNumbers>();
    public PrintNumbers randomPrintNumber;
    public RedBallShowType HighProRed = new RedBallShowType();
    public RedBallShowType HighProBlue = new RedBallShowType();
    public RedBallShowType MiddleProRed = new RedBallShowType();
    public RedBallShowType LowProRed = new RedBallShowType();
    public RedBallShowType LowProBlue = new RedBallShowType();
    protected override async Task OnInitializedAsync()
    {
        RedModel = await WiningRecordService.BigSelectRedStatistics();
        BlueModel = await WiningRecordService.BigSelectBlueStatistics();
        for (int i = 0; i < 5; i++)
        {
            if (i < 4)
            {
                HighProRed.ShowInfo += (((dynamic)RedModel[i]).type).ToString() + " , ";
            }
            else
                HighProRed.ShowInfo += (((dynamic)RedModel[i]).type).ToString();
            HighProRed.ItemList.Add(((dynamic)RedModel[i]).type);
        }
        for (int i = 5; i < 24; i++)
        {
            if (i < 23)
            {
                MiddleProRed.ShowInfo += (((dynamic)RedModel[i]).type).ToString() + " , ";
            }
            else
                MiddleProRed.ShowInfo += (((dynamic)RedModel[i]).type).ToString();
            MiddleProRed.ItemList.Add(((dynamic)RedModel[i]).type);
        }
        for (int i = 24; i < 34; i++)
        {
            if (i < 33)
            {
                LowProRed.ShowInfo += (((dynamic)RedModel[i]).type).ToString() + " , ";
            }
            else
                LowProRed.ShowInfo += (((dynamic)RedModel[i]).type).ToString();
            LowProRed.ItemList.Add(((dynamic)RedModel[i]).type);
        }
        for (int i = 0; i < 6; i++)
        {
            if (i < 5)
            {
                HighProBlue.ShowInfo += (((dynamic)BlueModel[i]).type).ToString() + " , ";
            }
            else
                HighProBlue.ShowInfo += (((dynamic)BlueModel[i]).type).ToString();
            HighProBlue.ItemList.Add(((dynamic)BlueModel[i]).type);
        }
        for (int i = 6; i < 12; i++)
        {
            if (i < 11)
            {
                LowProBlue.ShowInfo += (((dynamic)BlueModel[i]).type).ToString() + " , ";
            }
            else
                LowProBlue.ShowInfo += (((dynamic)BlueModel[i]).type).ToString();
            LowProBlue.ItemList.Add(((dynamic)BlueModel[i]).type);
        }
        await base.OnInitializedAsync();
    }
    public void PrintTicket()
    {
        StringBuilder sb = new StringBuilder();
        int i = 0;
        foreach (var p in PrintNumbersList)
        {
            int[] red = p.RedNumNumber.ToArray();
            Array.Sort(red);
            int[] blue = p.BlueNumNumber.ToArray();
            Array.Sort(blue);
            sb.Append(string.Format("大乐透第{0}注：\n", ++i));
            sb.Append(string.Join(",", red) + " + " + string.Join(" , ", blue));
            sb.AppendLine();
        }
        PrintJobService.Print(sb.ToString());
    }
    public void AddPrint()
    {
        if (randomPrintNumber != null)
            PrintNumbersList.Add(randomPrintNumber);
    }
    public void RandomHighSelection()
    {
        HighProRedList = HighProRed.ItemList.GetRange(0, HighProRed.ItemList.Count() - 1);
        MiddleProRedList = MiddleProRed.ItemList.GetRange(0, MiddleProRed.ItemList.Count() - 1);
        LowProRedList = LowProRed.ItemList.GetRange(0, LowProRed.ItemList.Count() - 1);
        Random r = new Random();
        HighProRed.RandomSelectedInfo = "";
        MiddleProRed.RandomSelectedInfo = "";
        LowProRed.RandomSelectedInfo = "";
        HighProBlue.RandomSelectedInfo = "";
        LowProBlue.RandomSelectedInfo = "";
        randomPrintNumber = new PrintNumbers();
        for (int i = 0; i < HighProRed.SelectNums; i++)
        {
            HighProRed.Items = HighProRedList.ToArray();
            int rand = r.Next(HighProRed.Items.Count());
            if (i < HighProRed.SelectNums - 1)
                HighProRed.RandomSelectedInfo += HighProRed.Items[rand].ToString() + " , ";
            else
                HighProRed.RandomSelectedInfo += HighProRed.Items[rand].ToString();
            randomPrintNumber.RedNumNumber.Add(HighProRed.Items[rand]);
            HighProRedList.Remove(HighProRed.Items[rand]);
        }
        for (int i = 0; i < MiddleProRed.SelectNums; i++)
        {
            MiddleProRed.Items = MiddleProRedList.ToArray();
            int rand = r.Next(MiddleProRed.Items.Count());
            if (i < MiddleProRed.SelectNums - 1)
            {
                MiddleProRed.RandomSelectedInfo += MiddleProRed.Items[rand].ToString() + " , ";
            }
            else
                MiddleProRed.RandomSelectedInfo += MiddleProRed.Items[rand].ToString();
            randomPrintNumber.RedNumNumber.Add(MiddleProRed.Items[rand]);
            MiddleProRedList.Remove(MiddleProRed.Items[rand]);
        }
        for (int i = 0; i < LowProRed.SelectNums; i++)
        {
            LowProRed.Items = LowProRedList.ToArray();
            int rand = r.Next(LowProRed.Items.Count());
            if (i < LowProRed.SelectNums - 1)
                LowProRed.RandomSelectedInfo += LowProRed.Items[rand].ToString() + " , ";
            else
                LowProRed.RandomSelectedInfo += LowProRed.Items[rand].ToString();
            randomPrintNumber.RedNumNumber.Add(LowProRed.Items[rand]);
            LowProRedList.Remove(LowProRed.Items[rand]);
        }
        HighProBlue.Items = HighProBlue.ItemList.ToArray();
        var hr = r.Next(HighProBlue.Items.Count());
        HighProBlue.RandomSelectedInfo += HighProBlue.Items[hr].ToString();
        randomPrintNumber.BlueNumNumber.Add(HighProBlue.Items[hr]);

        LowProBlue.Items = LowProBlue.ItemList.ToArray();
        var lr = r.Next(LowProBlue.Items.Count());
        LowProBlue.RandomSelectedInfo += LowProBlue.Items[lr].ToString();
        randomPrintNumber.BlueNumNumber.Add(LowProBlue.Items[lr]);
    }
    public class RedBallShowType
    {
        public int SelectNums { get; set; }
        public string ShowInfo { get; set; }
        public string RandomSelectedInfo { get; set; }
        public List<int> ItemList { get; set; } = new List<int>();
        public int[] Items { get; set; }
    }
    public class RedBallRandom
    {
        public int Number { get; set; }
        public int Times { get; set; }
    }
    public class PrintNumbers
    {
        public List<int> RedNumNumber { get; set; } = new List<int>();
        public List<int> BlueNumNumber { get; set; } = new List<int>();
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private PrintJobService PrintJobService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private WiningRecordService WiningRecordService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
    }
}
#pragma warning restore 1591
