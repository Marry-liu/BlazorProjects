// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace OrderSysManagement.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Git\BlazorPeojects\OrderSysManagement\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Git\BlazorPeojects\OrderSysManagement\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Git\BlazorPeojects\OrderSysManagement\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Git\BlazorPeojects\OrderSysManagement\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Git\BlazorPeojects\OrderSysManagement\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Git\BlazorPeojects\OrderSysManagement\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Git\BlazorPeojects\OrderSysManagement\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Git\BlazorPeojects\OrderSysManagement\_Imports.razor"
using OrderSysManagement;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Git\BlazorPeojects\OrderSysManagement\_Imports.razor"
using OrderSysManagement.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Git\BlazorPeojects\OrderSysManagement\_Imports.razor"
using AntDesign;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Git\BlazorPeojects\OrderSysManagement\_Imports.razor"
using OrderSysManagement.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Git\BlazorPeojects\OrderSysManagement\_Imports.razor"
using OrderSysManagement.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Git\BlazorPeojects\OrderSysManagement\_Imports.razor"
using OrderSysManagement.Service;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Git\BlazorPeojects\OrderSysManagement\_Imports.razor"
using OrderSysManagement.Methods;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Git\BlazorPeojects\OrderSysManagement\Pages\SalesVolume.razor"
using AntDesign.Charts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Git\BlazorPeojects\OrderSysManagement\Pages\SalesVolume.razor"
using Title = AntDesign.Charts.Title;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Git\BlazorPeojects\OrderSysManagement\Pages\SalesVolume.razor"
using System.Net;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/salesVolume")]
    public partial class SalesVolume : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 71 "C:\Git\BlazorPeojects\OrderSysManagement\Pages\SalesVolume.razor"
       
    //public  string ActiveKey { get; set; }
    [Parameter]
    public string Week { get; set; }
    static object[] _modelsDayOfWeek;
    object[] _modelsDayOfMouth;
    object[] _modelsMouthOfYear;
    object[] _modelsCostDayOfMouth;
    object[] _modelsCostMouthOfYear;
    object[] _modelsAndCostMouthOfYear;
    IChartComponent chart1;
    IChartComponent chart2;
    IChartComponent chart3;
    IChartComponent chart4;
    IChartComponent chart5;
    IChartComponent chart6;
    IChartComponent chart7;
    public decimal amountDayOfMouth;
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
    private void OnTabChanged(string activeKey)
    {
        //switch (activeKey)
        //{
        //    case "1":
        //        if (chart1 == null)
        //            break;
        //        config3.Title.Text = "总营业额: " + getAmount(_modelsDayOfWeek).ToString();
        //        chart1.UpdateConfig(config3);
        //        break;
        //    case "2":
        //        if (chart2 == null)
        //            break;
        //        config4.Title.Text = "总营业额: " + getAmount(_modelsDayOfMouth).ToString();
        //        chart2.UpdateConfig(config4);
        //        break;
        //    case "3":
        //        if (chart3 == null)
        //            break;
        //        config3.Title.Text = "总营业额: " + getAmount(_modelsMouthOfYear).ToString();
        //        chart3.UpdateConfig(config3);
        //        break;
        //    case "4":
        //        if (chart3 == null)
        //            break;
        //        config4.Title.Text = "总营业额: " + getAmount(_modelsMouthOfYear).ToString();
        //        chart3.UpdateConfig(config4);
        //        break;
        //}
    }
    #region 一周内的日营业额
    private void OnChangeDayOfWeek(DateTimeChangedEventArgs args)
    {
        _modelsDayOfWeek = TransactionService.GetTransactionDaySalesByWeekOrMouth(args.Date, "week");
        ChangeDataAndConfig<ColumnConfig>(chart1, _modelsDayOfWeek, config3);
    }
    ColumnConfig config3 = new ColumnConfig
    {
        Title = new Title
        {
            Visible = true,
            Text = "",
        },
        Description = new Description
        {
            Visible = true,
            Text = "",
        },
        ForceFit = true,
        Padding = "auto",
        XField = "type",
        YField = "sales",
        Meta = new
        {
            Type = new
            {
                Alias = "日期"
            },
            Sales = new
            {
                Alias = "营业额(元)"
            }
        },
        Label = new ColumnViewConfigLabel
        {
            Visible = true,
            Position = "middle"  // option: middle / top / bottom
        },
        Interactions = new Interaction[]
        {
            new Interaction
            {
                Type = "scrollbar",
            }
                    },
    };
    LineConfig config4 = new LineConfig
    {
        Title = new Title
        {
            Visible = true,
            //Text = "配置折线数据点样式"
        },
        Description = new Description
        {
            Visible = true,
            //Text = "自定义配置趋势线上数据点的样式"
        },
        Padding = "auto",
        ForceFit = true,
        XField = "type",
        YField = "sales",
        Label = new Label
        {
            Visible = true,
            Type = "point"
        },
        Point = new LineViewConfigPoint
        {
            Visible = true,
            Size = 5,
            Shape = "diamond",
            Style = new GraphicStyle
            {
                Fill = "white",
                Stroke = "#2593fc",
                LineWidth = 2
            }
        }
    };
    GroupedColumnConfig config1 = new GroupedColumnConfig
    {
        Title = new Title
        {
            Visible = true,
            Text = "分组柱状图"
        },
        ForceFit = true,
        XField = "type",
        YField = "sales",
        YAxis = new ValueAxis
        {
            Min = 0
        },
        Label = new ColumnViewConfigLabel
        {
            Visible = true
        },
        GroupField = "name",
        Color = new[] { "#1ca9e6", "#f88c24" }
    };
    #endregion 一周内的日营业额
    private void OnChangeDayOfMouth(DateTimeChangedEventArgs args)
    {
        _modelsDayOfMouth = TransactionService.GetTransactionDaySalesByWeekOrMouth(args.Date, "mouth");
        ChangeDataAndConfig<LineConfig>(chart2, _modelsDayOfMouth, config4);
    }
    private void OnChangeCostDayOfMouth(DateTimeChangedEventArgs args)
    {
        _modelsCostDayOfMouth = CostService.GetCostDaySalesByMouth(args.Date);
        ChangeDataAndConfig<LineConfig>(chart5, _modelsCostDayOfMouth, config4);
    }

    private void OnChangeCostMouthOfYear(DateTimeChangedEventArgs args)
    {
        _modelsCostMouthOfYear = CostService.GetCostMouthSalesByYear(args.Date.Year);
        ChangeDataAndConfig<LineConfig>(chart6, _modelsCostMouthOfYear, config4);
    }
    private void OnChangeMouthOfYear3(DateTimeChangedEventArgs args)
    {
        _modelsMouthOfYear = TransactionService.GetTransactionMouthSalesByYear(args.Date.Year);
        ChangeDataAndConfig<ColumnConfig>(chart3, _modelsMouthOfYear, config3);
    }
    private void OnChangeMouthOfYear4(DateTimeChangedEventArgs args)
    {
        _modelsMouthOfYear = TransactionService.GetTransactionMouthSalesByYear(args.Date.Year);
        ChangeDataAndConfig<LineConfig>(chart4, _modelsMouthOfYear, config4);
    }
    private void OnChangeAndCostMouthOfYear(DateTimeChangedEventArgs args)
    {
        object[] transaction = TransactionService.GetTransactionMouthSalesByYear(args.Date.Year);
        object[] cost = CostService.GetCostMouthSalesByYear(args.Date.Year);
        _modelsAndCostMouthOfYear = new object[transaction.Length + cost.Length];
        for (int i = 0; i < transaction.Length; i++)
        {
            _modelsAndCostMouthOfYear[i] = new { type = ((dynamic)transaction[i]).type, sales = ((dynamic)transaction[i]).sales, name = "transaction" };
        }
        for (int i = transaction.Length; i < _modelsAndCostMouthOfYear.Length; i++)
        {
            _modelsAndCostMouthOfYear[i] = new { type = ((dynamic)cost[i- transaction.Length]).type, sales = ((dynamic)cost[i - transaction.Length]).sales, name = "cost" };
        }
    }
    public decimal GetAmount(object[] models)
    {
        decimal amount = 0;
        if (models == null)
            return 0;
        foreach (var a in models)
        {
            //object匿名类的弱类型
            amount += ((dynamic)a).sales;
        }
        return amount;
    }
    public void ChangeDataAndConfig<T>(IChartComponent chart, object[] model, T tconfig) where T: IViewConfig, IPlotConfig
    {
        tconfig.Title.Text="共："+ GetAmount(model).ToString()+ " 元";
        chart.ChangeData(model);
        chart.UpdateConfig(tconfig);
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CommonMethods CommonMethods { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CostService CostService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private TransactionService TransactionService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
    }
}
#pragma warning restore 1591
